#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

test_script="./git-hook/scripts/test.sh"

branch_name=$(git symbolic-ref --short HEAD)
commit_id=$(git log -1 HEAD --format=%H)
result_dir=".result"
result_dir="$result_dir/$branch_name"
result_file="$result_dir/$commit_id"
result_success="$result_dir/success"
result_fail="$result_dir/fail"

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

    # Npm test
    echo "**** NPM Testing...   ****  üîç"
    if [ ! -f "$result_file" ] 
    then
      "$test_script"
    fi
    if [ -f "$result_fail" ]
    then
      cat "$result_file"
      echo >&2 "**** NPM Test ERROR!  ****  üêû"
      exit 1
    else
      echo "**** NPM Test PASSED! ****  üçª"
    fi 
	fi
done

exit 0
